package dsa.basic.day22.sorting;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;

public class DutchNationalFlag {

    @Test
    public void test1(){
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(1,1,2,2,0,1,2,2,1,0,1,2,0,2,1));
        Integer[] expected = {0,0,0,1,1,1,1,1,1,2,2,2,2,2,2};
        Integer[] actual = sortZeroOneTwo(list).toArray(new Integer[0]);
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    public void test2(){
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(0, 2, 2, 0, 0, 2, 1, 2, 0, 1, 1, 2, 0, 2, 2, 0, 1, 0, 0, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 2, 1, 0, 2, 2, 1, 2, 1, 1, 1, 1, 1, 0, 0, 0, 2, 0, 1, 0, 2, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 2, 1, 0, 2, 1, 0, 2, 0, 0, 2, 2, 1, 2, 2, 2, 1, 0, 0, 0, 2, 2, 1, 0, 1, 1, 0, 2, 0, 1, 2, 2, 2, 0, 2, 1, 0, 1, 2, 0, 2, 2, 0, 2, 1, 1, 2, 1, 2, 0, 2, 2, 2, 1, 2, 0, 1, 1, 1, 0, 1, 0, 1, 2, 2, 1, 1, 0, 2, 2, 1, 2, 2, 1, 0, 0, 0, 1, 1, 1, 2, 0, 2, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 2, 1, 1, 1, 2, 0, 2, 0, 2, 0, 0, 0, 1, 1, 0, 1, 2, 0, 2, 1, 0, 0, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 0, 0, 1, 2, 2, 1, 0, 1, 2, 0, 1, 0, 2, 2, 0, 0, 1, 1, 1, 0, 0, 0, 2, 2, 2, 0, 2, 1, 0, 1, 2, 0, 0, 0, 2, 1, 2, 2, 1, 2, 2, 1, 2, 0, 1, 0, 1, 2, 1, 2, 0, 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 2, 1, 2, 0, 2, 1, 1, 0, 1, 0, 2, 1, 2, 2, 1, 2, 0, 0, 2, 0, 0, 2, 0, 0, 1, 2, 0, 0, 0, 1, 0, 2, 1, 0, 1, 0, 1, 2, 0, 2, 0, 1, 1, 2, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 1, 1, 2, 0, 0, 0, 1, 2, 1, 2, 2, 0, 0, 1, 0, 2, 0, 2, 1, 2, 1, 2, 2, 0, 1, 2, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2));
        Integer[] expected = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2};
        Integer[] actual = sortZeroOneTwo(list).toArray(new Integer[0]);
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    public void test3(){
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 0, 2, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 0, 1, 0, 2, 1, 1, 0, 2, 0, 1, 2, 1, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 1, 2, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 0, 1, 1, 0, 2, 0, 0, 1, 0, 1, 1, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 0, 1, 1, 1, 2, 2, 0, 2, 0, 1, 0, 1, 1, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0, 2, 0, 1, 2, 1, 2, 0, 2, 0, 1, 0, 2, 1, 1, 0, 2, 0, 1, 2, 0, 1, 1, 1, 0, 2, 2, 1, 1, 0, 1, 1, 1, 1, 2, 0, 1, 2, 2, 0, 1, 0, 1, 1, 2, 1, 1, 0, 0, 2, 2, 1, 2, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 1, 2, 0, 1, 0, 2, 1, 2, 0, 1, 0, 1, 2, 1, 1, 2, 0, 2, 2, 0, 1, 2, 1, 2, 2, 1, 2, 1, 1, 0, 1, 2, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 2, 1, 1, 1, 1, 1, 0, 0, 2, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 2, 2, 1, 0, 0, 0, 0, 2, 2, 1, 0, 2, 1, 0, 2, 0, 2, 0, 0, 0, 2, 1, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 2, 1, 2, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 0, 0, 0, 1, 2, 0, 1, 2, 0, 2, 1, 0, 0, 2, 0, 2, 0, 2, 2, 1, 2, 0, 2, 0, 0, 1, 1, 1, 0, 2, 0, 1, 1, 1, 0, 1, 1, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 1, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 0, 0, 0, 2, 0, 1, 1, 0, 1, 1, 0, 1, 2, 2, 0, 0, 2, 0, 2, 1, 0, 1, 0, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0, 2, 2, 2, 0, 1, 0, 2, 1, 0, 2, 0, 0, 0, 0, 1, 2, 0, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 2, 2, 0, 0, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 2, 2, 2, 0, 2, 2, 1, 2, 1, 2, 2, 1, 1, 0, 0, 2, 1, 1, 0, 0, 1, 0, 1, 2, 0, 1, 2, 1, 2, 1, 0, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 2, 2, 0, 2, 1, 2, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 2, 0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 2, 2, 1, 1, 2, 1, 1, 0, 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 1, 2, 2, 2, 0, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 1, 2, 1, 0, 1, 1, 2, 2, 0, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 2, 1, 2, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 2, 2, 0, 1, 1, 1, 2, 0, 2, 1));
        //Integer[] expected = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2};
        Integer[] actual = sortZeroOneTwo(list).toArray(new Integer[0]);
        //Assertions.assertArrayEquals(expected, actual);
    }

    public ArrayList<Integer> sortZeroOneTwo(ArrayList<Integer> list) {
        int mid = 0, low = 0;
        int high = list.size()-1;

        while (mid <= high){
            Integer element = list.get(mid);
            switch (element){
                case 0:
                    swap(list, low, mid);
                    low++;
                    mid++;
                    break;
                case 1:
                    mid++;
                    break;
                case 2:
                    swap(list, mid, high);
                    high--;
                    break;
            }
        }
        System.out.println(list);
        return list;
    }

    private void swap(ArrayList<Integer> list, int i, int j){
        int temp = list.get(i);
        list.set(i, list.get(j));
        list.set(j, temp);
    }
}
